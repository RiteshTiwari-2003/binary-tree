# level order traversa; in binary tree using java and using python 

import java.util.LinkedList;
import java.util.Queue;
class TreeNode{
    int val;
    TreeNode left, right;
    TreeNode(int value){
        this.value=value;
        this.left=this.right=null;
    }
}
public class BinaryTreeLevelOrder{
    public void levelorderTraversal(TreeNode root){
        if (root==null){
            return;
        }
        Queue<TreeNode> queue= new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode current=queue.poll();
            System.out.println(current.val+" ");
            if (current.left!=null){
                queue.add(current.left);

            }
            if (current.right!=null){
                queue.add(current.right);
            }

        }
    }
    public static void main(String[] args){
        TreeNode root=new TreeNode(1);
        root.left=new TreeNode(2);
        root.right=new TreeNode(3);
        root.left.left=new TreeNode(4);
        root.left.right=TreeNode(5);
        root.right.left=TreeNode(6);
        root.right.right=TreeNode(7);
        BinaryTreeLevelOrder tree=new BinaryTreeLevelOrder();
        System.out.println("level order traversal:");
        tree.levelOrderTraversal(root);
    }
}

# python implementation

from collection import deque
class TreeNode:
    def __init__(self, val=0, left=None,right=None):
        self.val=val
        self.left=left
        self.right=right
def level_order_traversal(root):
    if not root;
        return
    queue=deque([root])
    while queue:
        current=queue.popleft()
        print(current.val,end=" ")
        if current.left:
            queue.append(current.left)
        if current.right:
            queue.append(current.right)
if __name__="__main__":
    root=TreeNode(1)
    root.left=TreeNode(2)
    root.right=TreeNode(3)
    root.left.left=TreeNode(4)
    root.left.right=TreeNode(5)
    root.right.left=TreeNode(6)
    root.right.right=TreeNode(7)
    print("level-order traversal")
    level_order_traversal(root)


    # iterative preorder traversal in python
    python implementation

    class TreeNode;
        def __init__(self,val=0,left=None,right=None);
            self.val=val
            self.left=left
            self.right=right
    def interastive_preorder_traversal(root):
        if not root:
            return 
        stck=[root]
        while stack:
            current=stack.pop()
            print(current.val," ")
            if current.right:
                stack.append(current.right)
            if current.left:
                stack.append(current.left)
if __name__="__main__":
    root=TreeNode(1)
    root.left=TreeNode(2)
    root.right=TreeNode(3)
    root.left.left=TreeNode(4)
    root.left.right=TreeNode(5)
    root.right.left=TreeNode(6)
    root.right.right=TreeNode(7)
    print("iterative solution ",end=" ")
    iterative-preorser_traversal(root)


java implementation 
import java.util.Stack;
class TreeNode{
        int val;
        Treenode left,  right;
        TreeNode(int val){
            this.val=val;
            this.left=this.right=null;

        }

}
public class BinaryTreePreorder{
    public void iterativePreorderTraversal(Treenode root){
        if (root==null){
            return;
        }
        Stack<TreeNode> stack=new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode current=stack.pop();
            System.ot.println(current.val+" ");
            if (current.right!=null){
                stack.push(current.right);

            }
            if (current.left!=null){
                stack.push(current.left);
            }
        }
   }
   public static void main(String[] args){
    TreeNode root=new TreeNode(1);
    root.left=new TreeNode(2);
    root.right=new TreeNode(3);
    root.left.left=new TreeNode(4);
    root.left.right=new TreeNode(5);
    root.right.left=TreeNode(6);
    root.right.right=TreeNode(7);
    BinaryTreePreorder tree=new BinaryTreePreorder();
    System.out.println("interative preorder traversal ");
    tree.iterativePreorderTraversal(root);
   }
}

# iterative inorder traversal in binary tree

implementation in python

class TreeNode:
    def __init__(self, val=0,left=None,right=None):
        self.val=val
        self.left=left
        self.right=right
def inorderTraversal(root):
    stck=[]
    result=[]
    current=root
    while current is not None or stck:
        while current is not None:
            stack.append(current)
            current=current.left
        current=stack.pop()
        result.append(current.value)
        current=current.right
    return result
if __name__="__main__":
    root=TreeNode(1)
    root.right=TrreNode(2)
    root.right.left=TreeNode(3)
    print("Inorder traversal",inorderTraversal(root))

# java implementation

import java.util.ArrayList;
impoert java.util.List;
import java.util.Stack;
class TreeNode{
    int val;
    TreeNode left,right;
    TreeNode(int val){
        this.val=val;
        left=right=null;
    }
}
public class InorderTraversal{
    public List<Integer> inorderTraversal(TrreNode root){
        List<Integer> result=new ArrayList<>();
        Stack<TreeNode> stack=new Stack<>();
        TreeNode current=root;
        while(current!=null || !stack.isEmpty()){
            while(current!=null){
                stack.push(current);
                current=current.left;
            }
            current=stack.pop();
            result.add(current.val);
            current=current.right;
        }
        return result;
    }
    public static void main(String[] args){
        TreeNode root=new TreeNode(1);
        root.right=new TreeNode(2);
        root.right.left=new TreeNode(3);
        InorderTraversal traversal=new InorderTraversal();
        Sydstem.out.println("Inorder traversal:"+traversal.inorderTraversal(root));
    }
}

# iterative postorder traversal in binary tree using two stack

python implementation 
class TreeNode:
    def __init__(self,val=0,left=None,right=None):
        self.val=val;
        self.left=left;
        self.right=right;
def postorderTraversal(root):
    if not root:
        return []
    stack1=[root]
    stack2=[]
    result=[]
    while stack1:
        node=stack1.pop()
        stack2.append(node)
        if node.left:
            stack1.append(node.left)
        if node.right;
            stack1.append(node.right)
    while stack2;
        result.append(stack2.pop().val)
    return result
if __name__="__main__":
    root=TreeNode(1)
    root.left=TreeNode(2)
    root.right=TreeNode(3)
    root.left.left=TreeNode(4)
    root.left.right=TreeNode(5)
    root.right.left=TreeNode(6)
    root.right.right=TreeNode(7)
    print("postorder traversal:",postorderTraversal(root))

java implementation

import java.util.ArrayList;
import java.util.List;
import java.util.stack;
class TreeNode{
    int val;
    TreeNode left,right;
    TreeNode(int val){
        this.val=val;
        left=right=null;
    }
}
public class PostOrderTraversal{
    public List<Integer> postOrderTraversal(TreeNode root){
        List<Integer> result=new ArrayList<>();
        if (root==null){
            return result;
        }
        Stack<TreeNode> stack1=new Stack<>();
        Stack<TreeNode> stack2=new Stack<>();
        stack1.push(root);
        while(!stack1.isEmpty(){
            TreeNode node=stack1.pop();
            stack2.push(node);
            if(node.left!=null){
                stack1.push(node.left);
            }
            if (node.right!=null){
                stack1.push(node.right);
            }
        })
        while (!stack2.isEmpty()){
            result.add(stack2.pop().val);
        }
        return result;
    }
    public static void main(String[] args){
        TreeNode root=new TreeNode(1);
        root.left=new TreeNode(2);
        root.right=Treenode(3);
        root.left.left=new TreeNode(4);
        root.left.right=new TreeNode(5);
        root.right.left=new TreeNode(6);
        root.right.right=new TreeNode(7);
        PostOrderTraversal traversal=new PostOrderTraversal();
        System.out.println("postorder traversal is "+tree.postOrderTraversal(root));

    }
}
