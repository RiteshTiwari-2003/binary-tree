# Daimeter of binary tree
longest path between two nodes

pass does not need to pass via root

like i have one tree
root=Treenode(1)
root.left=TreeNode(2)
root.right=TreeNode(3)
root.left.left=TreeNode(4)
root.left.right=TreeNode(5)

then daimeter of above tree is 3 from node 4 to node 3

def findmaxdaimeter(node):
    if root==null:
        return 
    lh=findleftHieght(node.left)
    rh=findrightHeight(node.right)
    maxi=max(maxi,lh+rh)
    findMax(node.left)
    findMax(node.right)

int findMax(node,maxi):
    if node==null:
        return 0
    lh=findMax(node.left,maxi)
    rh=findMax(node.right,maxi)
    maxi=max(maxi,lh_rh)
    return 1+max(lh,rh)

implementation of daimeter of binary treee in python

class TreeNode:
    def __init__(self,val=0,left=None,right=None):
        self.val=val
        self.left=left
        self.right=right
def daimeterOfBinaryTree(root):
    daimeter=0
    def hieght(node):
        nonlocal daimeter
        if not node:
            return 0
        lh=hieght(node.left)
        rh=hieght(node.right)
        daimeter=max(daimeter,lh+rh)
        return 1+max(lh,rh)
    hieght(root)
    return daimeter
if __name__="__main__":
    root=TreeNode(1)
    root.left=TreeNode(2)
    root.right=TreeNode(3)
    root.left.left=TreeNode(4)
    root.left.right=TreeNode(5)
    print("Diameter of the binary tree:"+diameterOfBinaryTree(root))


# finding the maximum path sum in binary tree

int maxPath(node,maxi):
    if (node==null):
        return 0
    leftSum=maxpath(node.left,maxi)
    rightSum=maxPath(node.right,maxi)
    maxi=max(maxi,leftSum+rihghtSum+node.val)
    return node.val+max(leftSum,rightSum)

class TreeNode:
    def __init__(self,val=0,left=None,right=None);
        self.val=val
        self.left=left
        self.right=right
class Solution:
    def maxPathSum(self,root:TreeNode)->int:
        self.max_sum=float('-inf')
        def helper(node):
            in not node:
                return 0
            left-max=max(helper(node.left),0)
            right_max=max(helper(node.right),0)
            current_sum=node.val+left_max+right_max
            self.max_sum=max(self.max_sum,current_sum)
            return node.val+max(left_max,right_max)
        helper(root)
        return self.max_sum
root=TreeNode(1)
root.left=TreeNode(2)
root.right=TreeNode(3)
root.left.left=TreeNode(4)
root.left.right=TreeNode(5)
root.right.right=TreeNode(6)
