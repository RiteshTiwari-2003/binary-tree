# iterative postorder traversal in binary tree using one Stack

class TreeNode:
    def _init_(self,val=0,left=None,right=None):
        self.val=val
        self.left=left
        self.right=right
def postOrderTraversal(root):
    if not root:
        return []
    stack=[]
    postorder=[]
    current = root
    while(current!=null && !stack.isEmpty()):
        if (current!=null){
            stack.push(current)
            current=current.left;
        }
        else{
            temp=st.top().right()
            if temp==null:
                temp=stack.top();
                stack.pop();
                postorder.add(temp);
                while(!st.empty()&&temp==stack.top().right){
                    temp=stack.top();
                    stack.pop();
                    postorder.add(temp);

                }        }
            else{
                current=temp;
            }

# preorder inorder postorder traversal 

if num ==1:
    preorder
    num++
    left
if num ==2 :
    inorder
    num++
    right
if num==3:
    postorder


# inorder, preorder postorder traversal in one code implementation

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def traverse_tree(root, order_type):
    """
    Unified tree traversal for preorder, inorder, and postorder.
    :param root: Root node of the tree
    :param order_type: 1 for preorder, 2 for inorder, 3 for postorder
    :return: List of nodes in the selected traversal order
    """
    if not root:
        return []
    
    stack = [(root, 1)]  # Stack contains tuples of (node, num)
    result = []

    while stack:
        node, num = stack.pop()

        if num == 1:  # Preorder
            if order_type == 1:
                result.append(node.val)
            stack.append((node, 2))
            if node.left:
                stack.append((node.left, 1))

        elif num == 2:  # Inorder
            if order_type == 2:
                result.append(node.val)
            stack.append((node, 3))
            if node.right:
                stack.append((node.right, 1))

        elif num == 3:  # Postorder
            if order_type == 3:
                result.append(node.val)

    return result

# Example Usage
if __name__ == "__main__":
    root = TreeNode(1)
    root.left = TreeNode(2)
    root.right = TreeNode(3)
    root.left.left = TreeNode(4)
    root.left.right = TreeNode(5)
    root.right.left = TreeNode(6)
    root.right.right = TreeNode(7)

    print("Preorder:", traverse_tree(root, 1))  # Output: [1, 2, 4, 5, 3, 6, 7]
    print("Inorder:", traverse_tree(root, 2))   # Output: [4, 2, 5, 1, 6, 3, 7]
    print("Postorder:", traverse_tree(root, 3)) # Output: [4, 5, 2, 6, 7, 3, 1]

